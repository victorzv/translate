{
  "_from": "translate",
  "_id": "translate@1.0.4",
  "_inBundle": false,
  "_integrity": "sha512-KA4v7YVlGaV6sxbaYT1+kL6nHvIVz3Ks9EJzXzKk0FxQirS6so6ODp/pU6/4arLa/VZAqBx05UXAmP/9voftWQ==",
  "_location": "/translate",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "translate",
    "fetchSpec": "latest",
    "name": "translate",
    "raw": "translate",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/translate/-/translate-1.0.4.tgz",
  "_shasum": "df90e6ab8041d6f9d86081553b078fcfc43a1ce8",
  "_shrinkwrap": null,
  "_spec": "translate",
  "_where": "C:\\Users\\KVP\\NODE\\1",
  "author": {
    "email": "public@francisco.io",
    "name": "Francisco Presencia",
    "url": "https://francisco.io/"
  },
  "bugs": {
    "url": "https://github.com/franciscop/translate/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "node-fetch": "^1.7.3"
  },
  "deprecated": false,
  "description": "Translate text to different languages on node.js and the browser",
  "devDependencies": {
    "babel-core": "^6.26.3",
    "babel-jest": "^21.2.0",
    "babel-preset-env": "^1.7.0",
    "dotenv": "^4.0.0",
    "fetch-mock": "^5.13.1",
    "rollup": "^0.50.0",
    "uglify-es": "^3.1.3"
  },
  "engine": [
    "node >=4.0.0"
  ],
  "homepage": "https://github.com/franciscop/translate#readme",
  "license": "MIT",
  "main": "translate.min.js",
  "name": "translate",
  "optionalDependencies": {},
  "readme": "# Translate\n\nConvert text to different languages on Node.js and the browser. Flexible package and powerful back-end using Google (default) or Yandex:\n\n```js\n// async/await. Options can be a language name (ISO 639)\nconst text = await translate('Hello world', 'es');\nconsole.log(text);  // Hola mundo\n\n// Promises with .then(). Options can also be an object\ntranslate('こんにちは世界', { from: 'ja', to: 'es' }).then(text => {\n  console.log(text);  // Hola mundo\n});\n```\n\n\n\n## Getting started\n\nThis package can be used in Node.js and on the browser. For the browser we are using `fetch`, so you might want to [polyfill it](https://polyfill.io/v2/docs/) depending on [the browsers you support](https://caniuse.com/#feat=fetch).\n\nTo use it in `node.js` first install it:\n\n```bash\nnpm install translate\n```\n\nThen import it to use it:\n\n```js\nconst translate = require('translate'); // Old school\nimport translate from 'translate';      // New wave\n```\n\nTo use it in the browser download the main `translate.min.js` file and include it:\n\n```html\n<script src=\"translate.min.js\"></script>\n```\n\nOr use the awesome [Jsdelivr  **CDN**](https://www.jsdelivr.com/package/npm/translate):\n\n```html\n<script src=\"https://cdn.jsdelivr.net/npm/translate@1.0.3/translate.min.js\"></script>\n```\n\nAfter including translate the usage is similar for both Node.js and the browser.\n\n\n\n## Options\n\nThe first parameter is the **string** that you want to translate. Right now only a single string of text is accepted.\n\nThe second parameter is the options. It accepts either a `String` of the language to translate **to** or a simple `Object` with these options:\n\n- **`to`**: the string of the language to translate to. It can be in any of the two ISO 639 (1 or 2) or the full name in English like `Spanish`. Defaults to **en**.\n- **`from`**: the string of the language to translate to. It can be in any of the two ISO 639 (1 or 2) or the full name in English like `Spanish`. Also defaults to **en**.\n- **`cache`**: a `Number` with the milliseconds that each translation should be cached. Leave it undefined to cache it indefinitely (until a server/browser restart).\n- **`engine`**: a `String` containing the name of the engine to use for translation. Right now it defaults to `google`. Read more [in the engine section](#engines).\n- **`key`**: the API Key for the engine of your choice. Read more [in the engine section](#engines).\n\nExamples:\n\n```js\n// Translate from English (default) to Spanish (specified)\nconst foo = await translate('Hello world', 'es');\n\n// Same as this:\nconst bar = await translate('Hello world', { to: 'es' });\n```\n\n> On both `to` and `from` defaulting to `en`: while I _am_ Spanish and was quite tempted to set this as one of those, English is the main language of the Internet and the main secondary language for those who have a different native language. This is why most of the translations will happen either to or from English.\n\n\n### Default options\n\nYou can change the default options for anything by calling the root library and the option name:\n\n```js\ntranslate.from = 'es';\n```\n\nThis can be applied to any of the options enumerated above.\n\n\n\n## Engines\n\nSeveral translating engines are available to translate your text:\n\n- **`google`**: ([demo](https://translate.google.com/) | [docs](https://cloud.google.com/translate/docs/)): Google Translate.\n- **`yandex`**: ([demo](https://translate.yandex.com/) | [docs](https://tech.yandex.com/translate/) | [API Key](https://translate.yandex.com/developers/keys)): Yandex Translate\n\n> To get the API Key you will be signing some contract with these services; it's your responsibility to follow these and we are not liable if you don't as explained in our MIT License.\n\nOnce you get the API key and if you are only going to be using one engine (very likely), we recommend setting this globally for your whole project:\n\n```js\n// ... include translate\n\ntranslate.engine = 'google';\ntranslate.key = 'YOUR-KEY-HERE';\n\n// ... use translate()\n```\n\nIf you are in Node.js, this likely comes from an environment variable:\n\n```js\n// ... include translate\n\ntranslate.engine = 'google';\ntranslate.key = process.env.TRANSLATE_KEY;\n\n// ... use translate()\n```\n\n\nTo pass it per-translation, you can add it to your arguments:\n\n```js\ntranslate('Hello world', { to: 'en', engine: 'google', key: 'YOUR-KEY-HERE' });\n```\n\n\n\n## Promises\n\nWorking with Promises and specially with [async/await](https://ponyfoo.com/articles/understanding-javascript-async-await) reduces [Callback Hell](http://callbackhell.com/). To see it in action, first you'll need an `async` function. Then put your `await` calls inside:\n\n```js\n// Browser; jQuery for demonstration purposes\n$('#translate').submit(async e => {\n  e.preventDefault();\n  const text = $('.text').text();\n  const spanish = await translate(text, { to: 'es' });\n  alert(spanish);\n});\n\n// Node.js; serverjs.io example for demonstration purposes\nconst route = async ctx => {\n  const spanish = await translate(ctx.body, { to: 'es' });\n  return send(spanish);\n};\n```\n\n\n\n## Authors\n\nCurrent package and development: [Francisco Presencia](https://francisco.io/)\n\nOriginal package and idea: Andrew Lunny (alunny), Marak Squires, Google\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/franciscop/translate.git"
  },
  "scripts": {
    "build": "rollup src/index.js -o translate.js --name translate --output.format umd && uglifyjs translate.js -o translate.min.js",
    "gzip": "gzip -c translate.min.js | wc -c && echo 'bytes' # Only for Unix",
    "start": "npm run watch # Start ~= Start dev",
    "test": "jest --coverage --collectCoverageFrom=src/**/*.js --detectOpenHandles",
    "watch": "nodemon --exec \"npm run build && npm test && npm run gzip\" --watch src --watch test --watch webpack.config.js --watch package.json"
  },
  "version": "1.0.4"
}
